"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Element = void 0;var _polymerElement = require("/asset/webcomponent/component.package/@polymer/polymer/polymer-element.js");
var _class = require("/asset/webcomponent/component.package/@polymer/polymer/lib/legacy/class.js");
var _css$convertTextToJSModule = _interopRequireDefault(require("./.css$convertTextToJSModule"));
var _html$convertTextToJSModule = _interopRequireDefault(require("./.html$convertTextToJSModule"));


const App = window.App || {};




class Element extends (0, _class.mixinBehaviors)([App.behavior], _polymerElement.Element) {
  static get is() {return 'polymer-next';}
  static get template() {return `<style>${_css$convertTextToJSModule.default}</style>${_html$convertTextToJSModule.default}`;}
  static get properties() {
    return {
      layout: {
        type: String,
        notify: true,
        reflectToAttribute: true },

      page: {
        type: Object,
        notify: true,
        reflectToAttribute: true },

      subroute: {
        type: Object,
        notify: true,
        reflectToAttribute: true } };


  }
  static get observers() {return [
    '_routePageChanged(routeData.pathTopLevel, subroute.path)',
    '_routeChanged(route)'];
  }
  constructor() {
    super();

    this.app.setting.location.routeBasePath = `${this.app.config.PROTOCOL}${this.app.config.HOST}`;
    this.app.documentElement = this;
  }
  connectedCallback() {
    super.connectedCallback();
  }

  _routeChanged(route) {

  }

  _routePageChanged(pathTopLevel, pathLevel2) {
    if (typeof pathTopLevel == 'undefined') return;
    let documentKey = this.checkConditionTree(pathTopLevel, pathLevel2.replace(/\//g, ""));


    let document = this.app.document.filter(unit => {
      if (unit.key == documentKey) return true;
      return false;
    })[0];


    this.layout = document.layout;
    this.page = document.page;

  }

  checkConditionTree(pathTopLevel, pathLevel2) {
    let documentKey = '';

    switch (pathTopLevel) {
      case '':
        documentKey = 'frontpage';
        break;
      case 'step':
        documentKey = 'step';
        break;
      case 'university':
        documentKey = 'universityPage';
        break;
      case 'contact':
        documentKey = 'about';
        break;
      case 'studyfield':
        switch (pathLevel2) {
          case 'medicine':
            documentKey = 'medicine';
            break;
          default:
            documentKey = 'studyfieldPage';
            break;}

        break;
      case 'country':
        switch (pathLevel2) {
          case 'bucharest':
            documentKey = 'bucharest';
            break;
          default:
            documentKey = 'countryPage';
            break;}

        break;
      case 'registration':
        switch (pathLevel2) {
          case 'single':
            documentKey = 'registration-single';
            break;
          case 'agency':
            documentKey = 'registration-agency';
            break;
          default:
            documentKey = 'registration-agency';
            break;}

        break;
      case 'view1':
        documentKey = 'homePage-view1';
        break;
      case 'view2':
        documentKey = 'homePage-view2';
        break;
      case 'view3':
        documentKey = 'homePage-view3';
        break;
      default:
      case 'view404':
        documentKey = 'view-state404';
        break;}



    return documentKey;
  }}exports.Element = Element;



window.customElements.define(Element.is, Element);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
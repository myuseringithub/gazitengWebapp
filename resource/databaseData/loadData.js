"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.loadData = loadData;var _commonDatabaseFunctionality = require("utility/middleware/commonDatabaseFunctionality.js");

async function loadData({ targetProjectConfig, databaseData }) {
  let rethinkdbConnection = await (0, _commonDatabaseFunctionality.connect)(rethinkdbConfig);
  await loadDatabaseData({ databaseData });
  await loadFrontendData({ targetConfig, rethinkdbConnection });
}

async function loadFrontendData({ targetConfig, rethinkdbConnection }) {
  let getTableDocument = { generate: getTableDocumentDefault, instance: [] };
  getTableDocument.instance['template_documentFrontend'] = await getTableDocument.generate('webappSetting', 'template_documentFrontend');
  const documentFrontendData = await getTableDocument.instance['template_documentFrontend'](targetConfig.rethinkdbConnection);
  let defaultLanguage = 'English';
  let uiContent = await queryPatternImplementation({
    databaseConnection: rethinkdbConnection,
    languageDocumentKey: defaultLanguage,
    dataTableName: 'ui' });

  targetConfig.frontendStatic = {

    config: targetConfig,
    setting: {
      location: {
        routeBasePath: `${targetConfig.PROTOCOL}${targetConfig.HOST}`,
        cdnBasePath: targetConfig.extendedSubclass.static['StaticContent'].url },

      mode: {

        language: defaultLanguage } },


    route: 'route',
    document: documentFrontendData };


}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Jlc291cmNlL2RhdGFiYXNlRGF0YS9sb2FkRGF0YS5qcyJdLCJuYW1lcyI6WyJsb2FkRGF0YSIsInRhcmdldFByb2plY3RDb25maWciLCJkYXRhYmFzZURhdGEiLCJyZXRoaW5rZGJDb25uZWN0aW9uIiwicmV0aGlua2RiQ29uZmlnIiwibG9hZERhdGFiYXNlRGF0YSIsImxvYWRGcm9udGVuZERhdGEiLCJ0YXJnZXRDb25maWciLCJnZXRUYWJsZURvY3VtZW50IiwiZ2VuZXJhdGUiLCJnZXRUYWJsZURvY3VtZW50RGVmYXVsdCIsImluc3RhbmNlIiwiZG9jdW1lbnRGcm9udGVuZERhdGEiLCJkZWZhdWx0TGFuZ3VhZ2UiLCJ1aUNvbnRlbnQiLCJxdWVyeVBhdHRlcm5JbXBsZW1lbnRhdGlvbiIsImRhdGFiYXNlQ29ubmVjdGlvbiIsImxhbmd1YWdlRG9jdW1lbnRLZXkiLCJkYXRhVGFibGVOYW1lIiwiZnJvbnRlbmRTdGF0aWMiLCJjb25maWciLCJzZXR0aW5nIiwibG9jYXRpb24iLCJyb3V0ZUJhc2VQYXRoIiwiUFJPVE9DT0wiLCJIT1NUIiwiY2RuQmFzZVBhdGgiLCJleHRlbmRlZFN1YmNsYXNzIiwic3RhdGljIiwidXJsIiwibW9kZSIsImxhbmd1YWdlIiwicm91dGUiLCJkb2N1bWVudCJdLCJtYXBwaW5ncyI6InVHQUFBOztBQUVPLGVBQWVBLFFBQWYsQ0FBd0IsRUFBRUMsbUJBQUYsRUFBdUJDLFlBQXZCLEVBQXhCLEVBQStEO0FBQ3BFLE1BQUlDLG1CQUFtQixHQUFHLE1BQU0sMENBQVFDLGVBQVIsQ0FBaEM7QUFDQSxRQUFNQyxnQkFBZ0IsQ0FBQyxFQUFFSCxZQUFGLEVBQUQsQ0FBdEI7QUFDQSxRQUFNSSxnQkFBZ0IsQ0FBQyxFQUFFQyxZQUFGLEVBQWdCSixtQkFBaEIsRUFBRCxDQUF0QjtBQUNEOztBQUVELGVBQWVHLGdCQUFmLENBQWdDLEVBQUVDLFlBQUYsRUFBZ0JKLG1CQUFoQixFQUFoQyxFQUF1RTtBQUNyRSxNQUFJSyxnQkFBZ0IsR0FBRyxFQUFFQyxRQUFRLEVBQUVDLHVCQUFaLEVBQXFDQyxRQUFRLEVBQUUsRUFBL0MsRUFBdkI7QUFDQUgsRUFBQUEsZ0JBQWdCLENBQUNHLFFBQWpCLENBQTBCLDJCQUExQixJQUF5RCxNQUFNSCxnQkFBZ0IsQ0FBQ0MsUUFBakIsQ0FBMEIsZUFBMUIsRUFBMkMsMkJBQTNDLENBQS9EO0FBQ0EsUUFBTUcsb0JBQW9CLEdBQUcsTUFBTUosZ0JBQWdCLENBQUNHLFFBQWpCLENBQTBCLDJCQUExQixFQUF1REosWUFBWSxDQUFDSixtQkFBcEUsQ0FBbkM7QUFDQSxNQUFJVSxlQUFlLEdBQUcsU0FBdEI7QUFDQSxNQUFJQyxTQUFTLEdBQUcsTUFBTUMsMEJBQTBCLENBQUM7QUFDL0NDLElBQUFBLGtCQUFrQixFQUFFYixtQkFEMkI7QUFFL0NjLElBQUFBLG1CQUFtQixFQUFFSixlQUYwQjtBQUcvQ0ssSUFBQUEsYUFBYSxFQUFFLElBSGdDLEVBQUQsQ0FBaEQ7O0FBS0FYLEVBQUFBLFlBQVksQ0FBQ1ksY0FBYixHQUE4Qjs7QUFFNUJDLElBQUFBLE1BQU0sRUFBRWIsWUFGb0I7QUFHNUJjLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsYUFBYSxFQUFHLEdBQUVoQixZQUFZLENBQUNpQixRQUFTLEdBQUVqQixZQUFZLENBQUNrQixJQUFLLEVBRHBEO0FBRVJDLFFBQUFBLFdBQVcsRUFBRW5CLFlBQVksQ0FBQ29CLGdCQUFiLENBQThCQyxNQUE5QixDQUFxQyxlQUFyQyxFQUFzREMsR0FGM0QsRUFESDs7QUFLUEMsTUFBQUEsSUFBSSxFQUFFOztBQUVKQyxRQUFBQSxRQUFRLEVBQUVsQixlQUZOLEVBTEMsRUFIbUI7OztBQWE1Qm1CLElBQUFBLEtBQUssRUFBRSxPQWJxQjtBQWM1QkMsSUFBQUEsUUFBUSxFQUFFckIsb0JBZGtCLEVBQTlCOzs7QUFpQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAndXRpbGl0eS9taWRkbGV3YXJlL2NvbW1vbkRhdGFiYXNlRnVuY3Rpb25hbGl0eS5qcydcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWREYXRhKHsgdGFyZ2V0UHJvamVjdENvbmZpZywgZGF0YWJhc2VEYXRhIH0pIHtcbiAgbGV0IHJldGhpbmtkYkNvbm5lY3Rpb24gPSBhd2FpdCBjb25uZWN0KHJldGhpbmtkYkNvbmZpZylcbiAgYXdhaXQgbG9hZERhdGFiYXNlRGF0YSh7IGRhdGFiYXNlRGF0YSB9KVxuICBhd2FpdCBsb2FkRnJvbnRlbmREYXRhKHsgdGFyZ2V0Q29uZmlnLCByZXRoaW5rZGJDb25uZWN0aW9uIH0pIC8vIGluaXRpYWxpemUgdGVtcGxhdGUgZG9jdW1lbnQgZnJvbnQgZW5kLlxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkRnJvbnRlbmREYXRhKHsgdGFyZ2V0Q29uZmlnLCByZXRoaW5rZGJDb25uZWN0aW9uIH0pIHtcbiAgbGV0IGdldFRhYmxlRG9jdW1lbnQgPSB7IGdlbmVyYXRlOiBnZXRUYWJsZURvY3VtZW50RGVmYXVsdCwgaW5zdGFuY2U6IFtdIH1cbiAgZ2V0VGFibGVEb2N1bWVudC5pbnN0YW5jZVsndGVtcGxhdGVfZG9jdW1lbnRGcm9udGVuZCddID0gYXdhaXQgZ2V0VGFibGVEb2N1bWVudC5nZW5lcmF0ZSgnd2ViYXBwU2V0dGluZycsICd0ZW1wbGF0ZV9kb2N1bWVudEZyb250ZW5kJylcbiAgY29uc3QgZG9jdW1lbnRGcm9udGVuZERhdGEgPSBhd2FpdCBnZXRUYWJsZURvY3VtZW50Lmluc3RhbmNlWyd0ZW1wbGF0ZV9kb2N1bWVudEZyb250ZW5kJ10odGFyZ2V0Q29uZmlnLnJldGhpbmtkYkNvbm5lY3Rpb24pXG4gIGxldCBkZWZhdWx0TGFuZ3VhZ2UgPSAnRW5nbGlzaCdcbiAgbGV0IHVpQ29udGVudCA9IGF3YWl0IHF1ZXJ5UGF0dGVybkltcGxlbWVudGF0aW9uKHtcbiAgICBkYXRhYmFzZUNvbm5lY3Rpb246IHJldGhpbmtkYkNvbm5lY3Rpb24sXG4gICAgbGFuZ3VhZ2VEb2N1bWVudEtleTogZGVmYXVsdExhbmd1YWdlLFxuICAgIGRhdGFUYWJsZU5hbWU6ICd1aScsXG4gIH0pXG4gIHRhcmdldENvbmZpZy5mcm9udGVuZFN0YXRpYyA9IHtcbiAgICAvLyBDb25maWd1cmF0aW9ucyBwYXNzZWQgdG8gZnJvbnRlbmRcbiAgICBjb25maWc6IHRhcmdldENvbmZpZyxcbiAgICBzZXR0aW5nOiB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICByb3V0ZUJhc2VQYXRoOiBgJHt0YXJnZXRDb25maWcuUFJPVE9DT0x9JHt0YXJnZXRDb25maWcuSE9TVH1gLFxuICAgICAgICBjZG5CYXNlUGF0aDogdGFyZ2V0Q29uZmlnLmV4dGVuZGVkU3ViY2xhc3Muc3RhdGljWydTdGF0aWNDb250ZW50J10udXJsLFxuICAgICAgfSxcbiAgICAgIG1vZGU6IHtcbiAgICAgICAgLy8gdmVyc2lvbiAvIG1vZGUgb2YgYXBwXG4gICAgICAgIGxhbmd1YWdlOiBkZWZhdWx0TGFuZ3VhZ2UsIC8vIGRlZmF1bHQgbGFuZ3VhZ2VcbiAgICAgIH0sXG4gICAgfSxcbiAgICByb3V0ZTogJ3JvdXRlJyxcbiAgICBkb2N1bWVudDogZG9jdW1lbnRGcm9udGVuZERhdGEsXG4gICAgLy8gdWlDb250ZW50OiB1aUNvbnRlbnRcbiAgfVxufVxuIl19